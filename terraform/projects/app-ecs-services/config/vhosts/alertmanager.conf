#cloud-config
users:
  - name: alertmanager
    system: true

package_update: true
package_upgrade: true
packages: ['chrony', 'nginx']

write_files:
  - content: |
      global:
    owner: root:root
    path: /etc/alertmanager/config.yml
    permissions: 0644
  - content: |
      [Unit]
      Description=alertmanager

      [Service]
      User=alertmanager
      ExecStart=/opt/alertmanager/alertmanager --config.file="/etc/alertmanager/config.yml"
      WorkingDirectory=/opt/alertmanager

      [Install]
      WantedBy = multi-user.target
    owner: root:root
    path: /etc/systemd/system/alertmanager.service
    permissions: 0644
  - owner: root:root
    path: /etc/filebeat/filebeat.yml
    permissions: 0444
    content: |
      filebeat.prospectors:
      - type: log
        enabled: true
        paths:
          - /var/log/nginx/*.log
        fields:
          type: nginx-access
        fields_under_root: true
        encoding: utf-8
        exclude_files: [".gz"]
        ignore_older: 3h

      output.logstash:
        hosts: ["${logstash_endpoint}:${logstash_port}"]
        loadbalance: true
        ssl.enabled: true
  - content: |
      server {
        listen 80 default_server;
        server_name ${domain_name};

        location / {
          proxy_pass  http://localhost:9093;
        }
      }
    owner: root:root
    path: /etc/nginx/sites-available/default
    permissions: 0644
  - content: |
      global:
        # The smarthost and SMTP sender used for mail notifications.
        smtp_smarthost: 'localhost:25'
        smtp_from: 'alertmanager@example.org'
        smtp_auth_username: 'alertmanager'
        smtp_auth_password: 'password'

      # The directory from which notification templates are read.
      templates:
      - '/etc/alertmanager/template/*.tmpl'

      # The root route on which each incoming alert enters.
      route:
        # The labels by which incoming alerts are grouped together. For example,
        # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
        # be batched into a single group.
        group_by: ['alertname', 'cluster', 'service']

        # When a new group of alerts is created by an incoming alert, wait at
        # least 'group_wait' to send the initial notification.
        # This way ensures that you get multiple alerts for the same group that start
        # firing shortly after another are batched together on the first
        # notification.
        group_wait: 30s

        # When the first notification was sent, wait 'group_interval' to send a batch
        # of new alerts that started firing for that group.
        group_interval: 5m

        # If an alert has successfully been sent, wait 'repeat_interval' to
        # resend them.
        repeat_interval: 3h

        # A default receiver
        receiver: tools-team-demo-general

        # All the above attributes are inherited by all child routes and can
        # overwritten on each.

        # The child route trees.
        routes:
        # This routes performs a regular expression match on alert labels to
        # catch alerts that are related to a list of services.
        - match_re:
            service: ^(foo1|foo2|baz)$
          receiver: tools-team-demo-general
          # The service has a sub-route for critical alerts, any alerts
          # that do not match, i.e. severity != critical, fall-back to the
          # parent node and are sent to 'team-X-mails'
        - match:
            severity: P1
          receiver: tools-team-demo-general

          routes:
          - match:
              severity: critical
            receiver: tools-team-demo-random

        # This route handles all alerts coming from a database service. If there's
        # no team to handle it, it defaults to the DB team.
        - match:
            service: database
          receiver: tools-team-demo-general
          # Also group alerts by affected database.
          group_by: [alertname, cluster, database]
          routes:
          - match:
              owner: team-X
            receiver: tools-team-demo-general
          - match:
              owner: team-Y
            receiver: tools-team-demo-general


      # Inhibition rules allow to mute a set of alerts given that another alert is
      # firing.
      # We use this to mute any warning-level notifications if the same alert is
      # already critical.
      inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        # Apply inhibition if the alertname is the same.
        equal: ['alertname', 'cluster', 'service']

      receivers:
      - name: 'tools-team-demo-general'
        slack_configs:
        - api_url: https://hooks.slack.com/services/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
          channel: '#general'

      - name: 'tools-team-demo-infradev'
        slack_configs:
        - api_url: https://hooks.slack.com/services/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
          channel: '#infra-dev'

      - name: 'tools-team-demo-random'
        slack_configs:
        - api_url: https://hooks.slack.com/services/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
          channel: '#random'
    owner: alertmanager:alertmanager
    path: /etc/alertmanager/alertmanager.yml
    permissions: 0644
